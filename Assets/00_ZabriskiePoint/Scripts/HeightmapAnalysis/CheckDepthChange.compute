#pragma kernel CheckDepthChange

RWStructuredBuffer<int> currentDepthData;
StructuredBuffer<int> prevDepthData;
RWStructuredBuffer<int> changeData;
RWTexture2D<float4> changePointsDebug;
int distanceChangeThreshold;
int depthImageWidth;
int depthImageHeight;
int maxDepthDistance;
float maskPercentage;

[numthreads(256, 1, 1)]
void CheckDepthChange (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= currentDepthData.Length)
        return;

    int2 pixelPos = int2(id.x % depthImageWidth, id.x / depthImageWidth);

    // Calculate the mask dimensions
    int maskWidth = (int)(depthImageWidth * maskPercentage / 100);
    int maskHeight = (int)(depthImageHeight * maskPercentage / 100);

    // Calculate the start and end positions for the mask
    int2 maskStart = int2((depthImageWidth - maskWidth) / 2, (depthImageHeight - maskHeight) / 2);
    int2 maskEnd = int2(maskStart.x + maskWidth, maskStart.y + maskHeight);

    // If the pixel is outside the mask, color it blue and return
    if (pixelPos.x < maskStart.x || pixelPos.x >= maskEnd.x || pixelPos.y < maskStart.y || pixelPos.y >= maskEnd.y)
    {
        changePointsDebug[pixelPos] = float4(0, 0, 1, 1); // Blue
        return;
    }

    

    int limDepthCurrent = (currentDepthData[id.x] <= maxDepthDistance) ? currentDepthData[id.x] : 0;

    int limDepthPrevious = (prevDepthData[id.x] <= maxDepthDistance) ? prevDepthData[id.x] : 0;

    

    if(limDepthPrevious == 0 || limDepthCurrent == 0 || limDepthCurrent > 1500)
    {
        changeData[id.x] = 0;
        changePointsDebug[pixelPos] = float4(0, 0, 0, 1); // Black
        return;
    } 

    // changePointsDebug[pixelPos] = float4(1, 0, 0, 1);; // Red
    // return;

    int diff = abs(currentDepthData[id.x] - prevDepthData[id.x]);

    

    // Check if the difference is greater than threshold (2mm)
    if (diff > distanceChangeThreshold)
    {
        changeData[id.x] = 1;
        changePointsDebug[pixelPos] = float4(1, 0, 0, 1);; // Red
    }
    else
    {
        changeData[id.x] = 0;
        changePointsDebug[pixelPos] = float4(0, 0, 0, 1); // Black
    }
}